/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, NgModule, NgZone, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DomPortalHost } from '@angular/cdk/portal';

let BMAP_CONFIG = new InjectionToken('bmap.config');

class BMapDirective {
    /**
     * @param {?} mapConfig
     * @param {?} elementRef
     * @param {?} zone
     */
    constructor(mapConfig, elementRef, zone) {
        this.mapConfig = mapConfig;
        this.elementRef = elementRef;
        this.zone = zone;
        this.mapLoaded = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // this.loader.load().then(() => {
        const /** @type {?} */ map = this.map = this.zone.runOutsideAngular(() => {
            return new BMap.Map(this.elementRef.nativeElement, {
                enableMapClick: false
            });
        });
        const /** @type {?} */ center = this.mapConfig.center || [120, 30], /** @type {?} */ zoom = this.mapConfig.zoom || 10;
        if (2 !== center.length) {
            throw new Error("invalid lon lat");
        }
        map.centerAndZoom(new BMap.Point(center[0], center[1]), zoom);
        this.mapLoaded.emit(map);
        // });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.map) {
            if (changes['mapZoom']) {
                this.map.setZoom(this.mapZoom);
            }
            if (changes['mapCenter']) {
                this.map.setCenter(this.mapCenter);
            }
        }
    }
}
BMapDirective.decorators = [
    { type: Directive, args: [{
                selector: '[bmap]',
            },] },
];
/**
 * @nocollapse
 */
BMapDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [BMAP_CONFIG,] },] },
    { type: ElementRef, },
    { type: NgZone, },
];
BMapDirective.propDecorators = {
    'mapLoaded': [{ type: Output },],
    'mapCenter': [{ type: Input },],
    'mapZoom': [{ type: Input },],
};

class BMapModule {
    /**
     * @param {?} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: BMapModule,
            providers: [
                { provide: BMAP_CONFIG, useValue: config }
            ]
        };
    }
}
BMapModule.decorators = [
    { type: NgModule, args: [{
                declarations: [BMapDirective],
                imports: [CommonModule],
                exports: [BMapDirective],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
BMapModule.ctorParameters = () => [];

class GenericMarker extends BMap.Marker {
    /**
     * @param {?} point
     * @param {?} opts
     * @param {?} data
     */
    constructor(point, opts, data) {
        super(point, opts);
        this.data = data;
    }
}

/**
 *
 */
class PortalHostOverlay extends BMap.Overlay {
    /**
     * @param {?} componentFactoryResolver
     * @param {?} appRef
     * @param {?} defaultInjector
     */
    constructor(componentFactoryResolver, appRef, defaultInjector) {
        super();
        this.hostDomElement = document.createElement("div");
        this.hostDomElement.style.position = "absolute";
        this.portalHost = new DomPortalHost(this.hostDomElement, componentFactoryResolver, appRef, defaultInjector);
    }
    /**
     * @param {?} portal
     * @param {?} lon
     * @param {?} lat
     * @return {?}
     */
    attach(portal, lon, lat) {
        this.portalHost.attach(portal);
        // [lon, lat] = wgs84tobd09(lon, lat);
        this.point = new BMap.Point(lon, lat);
        this.draw();
    }
    /**
     * @return {?}
     */
    detach() {
        this.portalHost.detach();
    }
    /**
     * @param {?} map
     * @return {?}
     */
    initialize(map) {
        this.map = map;
        let /** @type {?} */ panes = map.getPanes();
        let /** @type {?} */ floatPane = panes.floatPane;
        if (floatPane) {
            floatPane.appendChild(this.hostDomElement);
        }
        return this.hostDomElement;
    }
    /**
     * @return {?}
     */
    isVisible() {
        return true;
    }
    /**
     * @return {?}
     */
    draw() {
        // console.log('PortalHostOverlay::draw()');
        if (!this.point) {
            return;
        }
        const /** @type {?} */ position = this.map.pointToOverlayPixel(this.point);
        this.hostDomElement.style.left = position.x /*- this._size / 2 */ + "px";
        this.hostDomElement.style.top = position.y /*- this._size / 2 */ + "px";
    }
    /**
     * @return {?}
     */
    show() {
        this.hostDomElement.style.display = "";
    }
    /**
     * @return {?}
     */
    hide() {
        this.hostDomElement.style.display = "none";
    }
}

/**
 * 经纬度坐标转百度地图坐标
 * @param {?} lon
 * @param {?} lat
 * @return {?}
 */
function wgs84tobd09(lon, lat) {
    //     [lon, lat] = (<any>coordtransform).wgs84togcj02(lon, lat);
    //     [lon, lat] = (<any>coordtransform).gcj02tobd09(lon, lat);
    return [lon, lat];
}

/**
 * Generated bundle index. Do not edit.
 */

export { BMapDirective, BMapModule, BMAP_CONFIG, GenericMarker, PortalHostOverlay, wgs84tobd09 };
//# sourceMappingURL=bmap.js.map
