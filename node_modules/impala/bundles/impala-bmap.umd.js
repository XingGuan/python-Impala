/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/cdk/portal')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/cdk/portal'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.impala = global.ng.impala || {}, global.ng.impala.bmap = global.ng.impala.bmap || {}),global.ng.core,global.ng.common,global.ng.cdk.portal));
}(this, (function (exports,_angular_core,_angular_common,_angular_cdk_portal) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var BMAP_CONFIG = new _angular_core.InjectionToken('bmap.config');

var BMapDirective = (function () {
    /**
     * @param {?} mapConfig
     * @param {?} elementRef
     * @param {?} zone
     */
    function BMapDirective(mapConfig, elementRef, zone) {
        this.mapConfig = mapConfig;
        this.elementRef = elementRef;
        this.zone = zone;
        this.mapLoaded = new _angular_core.EventEmitter();
    }
    /**
     * @return {?}
     */
    BMapDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        // this.loader.load().then(() => {
        var /** @type {?} */ map = this.map = this.zone.runOutsideAngular(function () {
            return new BMap.Map(_this.elementRef.nativeElement, {
                enableMapClick: false
            });
        });
        var /** @type {?} */ center = this.mapConfig.center || [120, 30], /** @type {?} */ zoom = this.mapConfig.zoom || 10;
        if (2 !== center.length) {
            throw new Error("invalid lon lat");
        }
        map.centerAndZoom(new BMap.Point(center[0], center[1]), zoom);
        this.mapLoaded.emit(map);
        // });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    BMapDirective.prototype.ngOnChanges = function (changes) {
        if (this.map) {
            if (changes['mapZoom']) {
                this.map.setZoom(this.mapZoom);
            }
            if (changes['mapCenter']) {
                this.map.setCenter(this.mapCenter);
            }
        }
    };
    BMapDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[bmap]',
                },] },
    ];
    /**
     * @nocollapse
     */
    BMapDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [BMAP_CONFIG,] },] },
        { type: _angular_core.ElementRef, },
        { type: _angular_core.NgZone, },
    ]; };
    BMapDirective.propDecorators = {
        'mapLoaded': [{ type: _angular_core.Output },],
        'mapCenter': [{ type: _angular_core.Input },],
        'mapZoom': [{ type: _angular_core.Input },],
    };
    return BMapDirective;
}());

var BMapModule = (function () {
    function BMapModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    BMapModule.forRoot = function (config) {
        return {
            ngModule: BMapModule,
            providers: [
                { provide: BMAP_CONFIG, useValue: config }
            ]
        };
    };
    BMapModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    declarations: [BMapDirective],
                    imports: [_angular_common.CommonModule],
                    exports: [BMapDirective],
                    providers: [],
                },] },
    ];
    /**
     * @nocollapse
     */
    BMapModule.ctorParameters = function () { return []; };
    return BMapModule;
}());

var GenericMarker = (function (_super) {
    __extends(GenericMarker, _super);
    /**
     * @param {?} point
     * @param {?} opts
     * @param {?} data
     */
    function GenericMarker(point, opts, data) {
        var _this = _super.call(this, point, opts) || this;
        _this.data = data;
        return _this;
    }
    return GenericMarker;
}(BMap.Marker));

/**
 *
 */
var PortalHostOverlay = (function (_super) {
    __extends(PortalHostOverlay, _super);
    /**
     * @param {?} componentFactoryResolver
     * @param {?} appRef
     * @param {?} defaultInjector
     */
    function PortalHostOverlay(componentFactoryResolver, appRef, defaultInjector) {
        var _this = _super.call(this) || this;
        _this.hostDomElement = document.createElement("div");
        _this.hostDomElement.style.position = "absolute";
        _this.portalHost = new _angular_cdk_portal.DomPortalHost(_this.hostDomElement, componentFactoryResolver, appRef, defaultInjector);
        return _this;
    }
    /**
     * @param {?} portal
     * @param {?} lon
     * @param {?} lat
     * @return {?}
     */
    PortalHostOverlay.prototype.attach = function (portal, lon, lat) {
        this.portalHost.attach(portal);
        // [lon, lat] = wgs84tobd09(lon, lat);
        this.point = new BMap.Point(lon, lat);
        this.draw();
    };
    /**
     * @return {?}
     */
    PortalHostOverlay.prototype.detach = function () {
        this.portalHost.detach();
    };
    /**
     * @param {?} map
     * @return {?}
     */
    PortalHostOverlay.prototype.initialize = function (map) {
        this.map = map;
        var /** @type {?} */ panes = map.getPanes();
        var /** @type {?} */ floatPane = panes.floatPane;
        if (floatPane) {
            floatPane.appendChild(this.hostDomElement);
        }
        return this.hostDomElement;
    };
    /**
     * @return {?}
     */
    PortalHostOverlay.prototype.isVisible = function () {
        return true;
    };
    /**
     * @return {?}
     */
    PortalHostOverlay.prototype.draw = function () {
        // console.log('PortalHostOverlay::draw()');
        if (!this.point) {
            return;
        }
        var /** @type {?} */ position = this.map.pointToOverlayPixel(this.point);
        this.hostDomElement.style.left = position.x /*- this._size / 2 */ + "px";
        this.hostDomElement.style.top = position.y /*- this._size / 2 */ + "px";
    };
    /**
     * @return {?}
     */
    PortalHostOverlay.prototype.show = function () {
        this.hostDomElement.style.display = "";
    };
    /**
     * @return {?}
     */
    PortalHostOverlay.prototype.hide = function () {
        this.hostDomElement.style.display = "none";
    };
    return PortalHostOverlay;
}(BMap.Overlay));

/**
 * 经纬度坐标转百度地图坐标
 * @param {?} lon
 * @param {?} lat
 * @return {?}
 */
function wgs84tobd09(lon, lat) {
    //     [lon, lat] = (<any>coordtransform).wgs84togcj02(lon, lat);
    //     [lon, lat] = (<any>coordtransform).gcj02tobd09(lon, lat);
    return [lon, lat];
}

exports.BMapDirective = BMapDirective;
exports.BMapModule = BMapModule;
exports.BMAP_CONFIG = BMAP_CONFIG;
exports.GenericMarker = GenericMarker;
exports.PortalHostOverlay = PortalHostOverlay;
exports.wgs84tobd09 = wgs84tobd09;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=impala-bmap.umd.js.map
